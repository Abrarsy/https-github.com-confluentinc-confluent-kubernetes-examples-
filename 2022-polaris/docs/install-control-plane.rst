.. _cpc-install:

===============
Install Polaris
===============

Overview of Polaris Installation
================================

Polaris consists of the following components:

* Control Plane cluster: This is a Kubernetes cluster where you install the control plane. 
 
  * Orchestrator
  * Blueprints
    
    * Confluent component ClusterClasses
  
  * Confluent component cluster custom resources (CRs)
 
* Data Plane cluster: These are Kubernetes clusters where Confluent clusters are deployed. 

  * Agent

  * Confluent component pods

    These cluster pods are automatically generated by Polaris Orchestrator when
    you deploy Confluent component cluster custom resources (CRs) from the
    control plane.

  Data Plane can be deployed in the same Kubernetes cluster as Control Plane, or in a different cluster.

  You can have multiple Data Plane clusters registered with one Control Plane.

In this doc, ``$CPC_HOME`` is used to denote the location, both in the Control Plane and
the Data Plane clusters, where Polaris is installed.

Requirements
------------

Kubernetes versions 1.22+

Workflow
--------

The high-level workflow for installing Polaris and using it to manage CFK is as follows:

Day 0
  #. The Platform team sets up the Confluent Private Cloud control plane.

  #. The Platform team creates Blueprints.

Day 1
  #. The Application developer registers the target Kubernetes infrastructure for the Data Plane.

  #. The Application team or Platform team selects a Blueprint and provisions a Deployment

  #. The Platform Team (or the Application team?) administers deployment provisioning

Day 2
  * The Platform Team manages a provisioned deployment

  * The Platform Team onboards a tenant to provisioned deployments

  * The Application team creates application resources for a provisioned deployment

  * The Application team creates “global” application resources across multiple provisioned deployments

.. _cpc-install-control-plane:

Install Control Plane
=====================

As a platform admin, you deploy the Control Plane and add specific
configurations for the Blueprints and Platform resources in the Control Plane.
 
#. If working with multiple clusters, set the current context to the Control 
   Plane, denoted as ``<control-plane-context>``:

   .. sourcecode:: bash

      kubectl config use-context <control-plane-context> 
      
#. (Recommeded) Create the namespace for the Polaris system components, denoted
   as ``<cpc-system-namespace>``:

   .. sourcecode:: bash

      kubectl create namespace <cpc-system-namespace> 

#. Generate a KubeConfig file. The file is used for the Agents on the remote 
   Data Plane clusters to get a token to connect and communicate to the Control 
   Plane cluster.
   
   The script also creates the required Kubernetes roles and a role binding for
   the Polaris service account.

   .. sourcecode:: bash
   
      $CPC_HOME/scripts/kubeconfig_generate.sh <polaris-service-account> <cpc-system-namespace> /tmp

#. Create a Docker Registry secret for the repository where you will pull the 
   Polaris packages from:

   For example:

   .. sourcecode:: bash

      export JFROG_USERNAME=<user>@confluent.io
      export JFROG_PASSWORD=<JFROG_API_KEY>
      export EMAIL=<user>@confluent.io
 
      kubectl create secret docker-registry <confluent-registry-secret> \
              --docker-server=confluent-docker.jfrog.io \
              --docker-username=$JFROG_USERNAME \
              --docker-password=$JFROG_PASSWORD \
              --docker-email=$EMAIL             \
       -- namespace <cpc-system-namespace> 
 
#. Create the Webhook certificate secret:

   .. sourcecode:: bash

      $CPC_HOME/generate-keys.sh <cpc-system-namespace> <certs-dir>

      kubectl create secret generic webhooks-tls \
          --from-file=ca.crt=<certs-dir>/ca.pem \
          --from-file=tls.crt=<certs-dir>/server.pem \
          --from-file=tls.key=<certs-dir>/server-key.pem \
          --namespace <cpc-system-namespace> \
          --save-config --dry-run=client -oyaml | \
          kubectl apply -f -

#. Install the Orchestrator CRDs:

   .. sourcecode:: bash

      kubectl apply -f cpc-orchestrator/charts/cpc-orchestrator/crds

#. Install the Orchestrator Helm chart:

   #. In the Orchestrator Values file (``<orchestrator-values-file>``), specify
      the image tag and the Docker registry secret you created in the previous 
      steps.

      .. sourcecode:: yaml

         image:
           registry: confluent-docker.jfrog.io
           repository: confluentinc/cpc-operator
           tag: "<orchestrator-image-tag>"
           pullPolicy: Always
         imagePullSecretRef: <confluent-registry-secret>

#. Install the Orchestrator:

   .. sourcecode:: bash

      helm upgrade --install -f <orchestrator-values-file> \
        cpc-orchestrator $CPC_HOME/cpc-orchestrator/charts/cpc-orchestrator \
        --namespace <cpc-system-namespace>

.. _cpc-create-blueprint: 

Create Confluent Blueprints
===========================

Polaris Blueprints are configuration templates for Confluent components. You
create Blueprints to enforce infrastructure and deployment standards. Your team
can then take those Blueprint and deploy Confluent Platform to get standard
deployments.

Polaris ships with the following Blueprints that you can leverage out of the
box:

* Single Node
* Recommended Security Production
* Connect to Confluent Cloud

From the Control Plane, you can perform the following on your Blueprints:

* View Blueprints available out of the box
* Create a new Blueprint
* Update Blueprints
* Delete Blueprints

A Polaris Blueprint consists of a Bluepoint CR and a set of Confluent components
ClusterClass CRs. 

The Confluent component ClusterClasses describe the following for the clusters
to be deployed:

* The Confluent components being deployed
* Sizing of the Confluent components
* Authentication strategy for Kafka 
* Authentication strategy for REST APIs
* Authorization strategy
* Certificate management strategy
* Docker registry strategy

Blueprint custom resource 
-------------------------

A Blueprint CR has the following properties:

.. sourcecode:: yaml 

   apiVersion: core.cpc.platform.confluent.io/v1beta1
   kind: ConfluentPlatformBlueprint
   metadata:
     name:                                    —----- [1]
     namespace:                               —----- [2]
     annotations:
       cpc.platform.confluent.io/description: —----- [3]
   spec:
     credentialStore:
       type:                                  —----- [4]        
     certificateStore:                        ------ [5] 
       type:                                  -—---- [6] 
   
     confluentMonitoring:                     —----- [7] 
       healthPlus:                            —----- [8] 
         confluentCloudAPIKey:                —----- [9] 
           directoryPathInContainer:          -—---- [10] 
           secretRef:                         -—---- [11]
     metaDataService:                         —----- [12] 
       identityProviderType:                  ------ [13] 
       tokenKeyPair:                          —----- [14] 
         Autogenerated:                       —----- [15]  
         directoryPathInContainer:            ------ [16] 
         secretRef:                           —----- [17] 
   
     k8s:                                     —----- [18] 
       annotations:                           -—---- [19] 
       labels:                                —----- [20] 
       pullPolicy:                            ------ [21] 
     dockerImages:
     - registry: docker.io
       directoryPathInContainer:
       secretRef:
     confluentPlatform:
       version:                               —----- [22]
   
     Components:                              —----- [23]
       zookeeperCluster:
         classRef:
           name: 
           namespace: 
       kafkaCluster:
         classRef: 
           name: 
           namespace: 
       ksqlDBCluster:
         classRef:
           name: 
           namespace: 
       controlCenterCluster:
         classRef:
           name: 
           namespace: 
       schemaRegistryCluster:
         classRef:
           name: 
           namespace:
       connectCluster:
         classRef:
           name: 
           namespace: 

* [1] The name of this Blueprint.
* [2] The namespace of this Blueprint.
* [3] The description of this Blueprint.
* [4] The type of the credentials provider. Valid options are ``vault`` and
  ``k8ssecret``.
  
* [5] The storing mechanism for all certificates.
* [6] The type of the certificates provide. Valid options are ``vault`` and 
  ``k8ssecret``.
  
* [7] The Confluent monitoring mechanism. Default to use the organization 
  Health+ account details.
  
* [8] The Health+ details.

* [9] The credentials to communicate with Confluent Cloud.
* [10] The directory path in the container where the license key is mounted.
* [11] The Kubernetes secret for the license key.
* [12] The MDS settings for RBAC CP settings.
* [13] Required. The type of identity provider used by MDS. Valid option is 
  ``ldap``.
  
* [14] The token key pair to configure the MDS.
* [15] Specifies if the credential is autogenerated and managed by Polaris. 
* [16] Specifies the directory path in the container where the license key is 
  mounted.
  
* [17] The name of the secret reference for the license key.
* [18] The Kubernetes-specific configs for the internal Polaris Kubernetes 
  objects.
  
* [19] Kubernetes annotations.
* [20] Kubernetes labels.
* [21] The policy for pulling images. Valid options are ``Always``, ``Never``, 
  and ``IfNotPresent``. The default value is ``IfNotPresent``.
  
* [22] The version of Confluent Platform to be deployed.
* [23] The name of the Confluent component class and its namespace for each 
  Confluent component to be deployed
 
Confluent component ClusterClass custom resource  
------------------------------------------------

A component ClusterClass CR has the following content:

.. sourcecode:: yaml 

   apiVersion: core.cpc.platform.confluent.io/v1beta1
   kind:                                      —----- [1]
   metadata:
     name:                                    —----- [2]
     namespace:                               —----- [3]
     annotations:
       cpc.platform.confluent.io/description: —----- [4]
   spec:
      provisioner:
       type: cfk                              —----- [5]
       cfk:                                   —----- [6]
         replicas:                            —----- [7]
         # +optional
         image:
           application:
             registry: docker.io
             repository:                      —----- [8]
             tag: 7.2.0
           init:
             registry: docker.io
             repository:                      —----- [9]
             tag:                             —----- [10]
       # Default multiRegionCluster.enabled false
       # Default maxReplicas to 6
       # Default image to docker hub
       # Default k8s.*
       # Default configOverrides to empty
       # Default metrics to empty
       # Default rackAssignment to empty
       # Default metricReporterEnabled to true
   
         volume:
           data:
             capacity:                        —----- [11]
           log:
             capacity:                        —----- [12]

* [1] Confluent component class. Set to one of the following:

  * ZookeeperClusterClass
  * ConnectClusterClass
  * ControlCenterClusterClass
  * KafkaClusterClass
  * KsqlDBClusterClass
  * ZookeeperClusterClass
  
* [2] The name of the component ClusterClass CR.
* [3] The namespace of the component ClusterClass CR.
* [4] The description of the component ClusterClass.
* [5] Required.
* [6] Required.
* [7] The number of replicas in the cluster. Default is ``3``.
* [8] The Docker repository where the component image resides.
* [9] The Docker repository where the CFK init container image resides.
* [10] The image tag, which is the release of the component.
* [11] The component data capacity.
* [12] The component log capacity.

To deploy a Blueprint and a Confluent component ClusterClass:

.. sourcecode:: 
  
   kubectl apply -f <Blueprint-CR>

   kubectl apply -f <Confluent-component-cluster-class-CR> 
   
Configure Networking in Blueprint 
--------------------------------- 

You specify two types of networking to access each Confluent components:

* Internal networking
* External networking

Polaris allows you to make all interfaces encrypted and publicly accessible over
an FQDN. There are two inputs that you need to provide:

* How to manage certificates
* What mechanism (Load Balancer, Nodeports, Ingress, or Routes) to use for 
  inputs

You have two options to automate certificate creation and management:

* Allow Polaris to automate creating and managing internal and external 
  networking certificates.

* Allow Polaris to automate creating and managing only internal networking 
  certificates.

You can enable external access at the Blueprint level. Then, for any individual
component interface, you can disable external access at the component level.

.. _cpc-install-data-plane: 

Install Data Plane
==================

A Polaris Data Plane hosts the infrastructure runtime that a Confluent
Deployment runs on.  A Data Plane can be deployed in the same Kubernetes cluster
as the Control Plane or in a different Kubernetes cluster.

The high-level workflow is:

#. Register the Data Plane cluster and the Health Check in the Control Plane.

#. Install the Agent and CFK in the Data Plane.

Register Data Plane 
-------------------

As a platform admin, register an existing Kubernetes infrastructure to allow
others to deploy Confluent environments to that infrastructure. The
infrastructure consists of a Kubernetes cluster custom resource and a namespace.

#. In the Data Plane cluster, find the Kubernetes ID of the cluster:

   .. sourcecode:: bash 
   
      kubectl get namespace kube-system -oyaml --context <data-plane-context> | grep uid

#. In the Control Plan cluster, create a KubernetesCluster CR, using the 
   Kubernetes ID retrieved in the previous step. Then apply the CR with 
   the ``kubectl apply -f`` command.

   .. sourcecode:: yaml 
   
      apiVersion: core.cpc.platform.confluent.io/v1beta1
      kind: KubernetesCluster
      metadata:
        name:             —----- [1]
        namespace:        —----- [2]
      spec:
        k8sID:            —----- [3]
        description:      —----- [4]
        topology:         —----- [5]
          region: 
          zones:
          - 
          - 
          - 
        k8sClusterDomain: —----- [6]
      
   * [1] The name of the KubernetesCluster CR. 
   * [2] The namespace of the KubernetesCluster CR.
   * [3] The Data Plane cluster ID that was retrieved in the previous step.
   * [4] The description of the Data Plane cluster.
   * [5] The topology of the Kubernetes cluster.
   * [6] The domain for the cluster. The default is ``cluster.local``.

#. In the Control Plan cluster, create and apply the HealthCheck CR. Its spec 
   has a reference to the Data Plane Kubernetes cluster CR you specified  in the 
   previous step:
   
   .. sourcecode:: yaml 

      apiVersion: core.cpc.platform.confluent.io/v1beta1
      kind: CPCHealthCheck
      metadata:
        name:                                    —----- [1]
        namespace:                               —----- [2]
        annotations:
          cpc.platform.confluent.io/description: —----- [3]
      spec:
        k8sClusterRef:                           —----- [4]
          name:                                  —----- [5]
          namespace:                             —----- [6]

   * [1] The name of the HealthCheck CR.
   * [2] The namespace of the HealthCheck CR.
   * [3] The description of this HealthCheck CR.
   * [4] Required.
   * [5] The name of the KubernetesCluster CR.
   * [6] The namespace of the KubernetesCluster CR.

Install Agent
---------------------

.. _cpc-install-local-agent: 

-------------------
Install local Agent 
-------------------

Install an Agent in the Control Plane cluster to set up a local Data Plane and
to deploy Confluent.

#. Install the Agent CRDs:

   .. sourcecode:: bash 
   
      kubectl apply -f $CPC_HOME/cpc-agent/charts/cpc-agent/crds

#. Install the Agent.

   .. sourcecode:: bash 
   
      helm upgrade --install -values $CPC_HOME/cpc-agent/charts/values/local.yaml  \ 
        cpc-agent $CPC_HOME/cpc-agent/charts/cpc-agent \ 
        --set mode=Local \
        --namespace <cpc-system-namespace>

#. Install CFK.

.. _cpc-install-remote-agent: 

--------------------
Install remote Agent 
--------------------

Install an Agent in a separate Data Plane cluster to set up a remote Data Plane
and to deploy Confluent.

#. Create a namespace for the Polaris system components, denoted as 
   ``<cpc-system-namespace>``:

   .. sourcecode:: bash 

      kubectl create namespace <cpc-system-namespace> --context <data-plane-context>

#. Install the Polaris Agent CRDs:

   .. sourcecode:: bash 

      kubectl apply -f $CPC_HOME/cpc-agent/charts/cpc-agent/crds --context <data-plane-context>

#. Create a Docker Registry secret to pull the Polaris packages from the image 
   repository. 
   
   For example:

   export JFROG_USERNAME=<user>@confluent.io
   export JFROG_PASSWORD=<JFROG_API_KEY>
   export EMAIL=<user>@confluent.io
 
   kubectl create secret docker-registry <confluent-registry-secret> \
           --docker-server=confluent-docker.jfrog.io \
           --docker-username=$JFROG_USERNAME \
           --docker-password=$JFROG_PASSWORD \
           --docker-email=$EMAIL \
     --context <data-plane-context> \
     --namespace <cpc-system-namespace> 

#. Create a KubeConfig secret. KubeConfig is required for a remote Data Plane 
   to communicate with the Control Plane.

   .. sourcecode:: bash 

      kubectl create secret generic <control-plane-kubeconfig> \
        --from-file=kubeconfig=/tmp/kubeconfig \
        --context <data-plane-context> \
        --namespace <cpc-system-namespace>

#. Install the Agent Helm chart using the secret created in the previous 
   steps:
   
   .. sourcecode:: bash 

      helm upgrade --install --values $CPC_HOME/cpc-agent/charts/values/local.yaml \
      cpc-agent $CPC_HOME/cpc-agent/charts/cpc-agent \
      --set mode=Remote \
      --set remoteKubeConfig.secretRef=<control-plane-kubeconfig> \
      --context <data-plane-context> \
      --namespace <cpc-system-namespace>

#. Install CFK.

Deploy Confluent Plaform Cluster
================================

The Deployment custom resources (CRs) allow you to deploy Confluent component
clusters in the target Kubernetes Infrastructure using a Blueprint.

From the Control Plane, you can perform the following on all your Confluent
clusters Deployments:

* Provision a Deployment
* Monitor the status of a Deployment
* Update a Deployment
* Upgrade a Deployment
* Delete a Deployment

A Deployment has specific configurations that you must set:

* Size: Number of nodes

You cannot change the following properties in the Confluent cluster CRs once a
Deployment has been provisioned:

* K8s cluster (``spec.k8sClusterRef.name``)

A Deployment allows you to override the following Blueprint configuration
settings:

* ``replicas`` 
* ``dataVolumeCapacity`` 
* ``externalAccess`` 
* ``listeners`` 
* ``configOverrides`` 

To deploy a Confluent component cluster, take the following steps in the Control
Plane cluster:

#. (Recommended) Create a namespace for the Confluent component CRs:

   .. sourcecode:: bash 
   
      kubectl create namespace <Confluent-CR-namespace> --context <control-plane-context>

#. Edit the CRs for the Confluent component clusters: 

   .. sourcecode:: yaml

      apiVersion: cpc.platform.confluent.io/v1beta1
      Kind:                     ------ [1]
      metadata:
        name:                   —----- [2]
      spec:
        targetCluster:          —----- [3]
        blueprintRef:
          name:                 —----- [4]
          namespace:            ------ [5]
        k8sClusterRef:
          name:                 ------ [6]
          namespace:            ------ [7]
        replicas:               ------ [8]
        dataVolumeCapacity:     —----- [9]
        externalAccess:         ------ [10]
        configOverrides:        ------ [11]
        dependencies:           ------ [12]
          metricsReporter:      ------ [13]

* [1] Confluent component cluster type. Specify one of the following:

  * ``ZookeeperCluster``
  * ``KafkaCluster``
  * ``SchemaRegistryCluster``
  * ``ControlCenterCluster``
  * ``ConnectCluster``
  * ``KafkaRestProxyCluster``
  * ``KsqlDBCluster``
  
* [2] Name of the CR.
* [3] Optional. The namespace of the CR. 
* [3] Optional. The target cluster where the component cluster should be 
  deployed.
  
* [4] Required. The name of the Blueprint CR to be used.
* [5] Optional. The namespace of the Blueprint CR.
* [6] Required. The Kubernetes clusters where the component cluster CR is to be 
  deployed.
  
* [7] Optional. The namespace where the compoent cluster CR is to be deployed.
* [8] Defaults to the replicas from the Blueprint.
* [9] Defaults to the dataVolumeCapacity from the Blueprint
* [10] Defaults to the externalAccess and listeners from blueprint
* [11] Defaults to the configOverrides from the Blueprint.
* [12] Specify the cluster name and namespace.
* [13] For Kafka. Default metrics to send to Health+ and current Kafka.

The following is an example of a Confluent CR to deploy Zookeeper, Kafka, and
Schema Registry:

.. sourcecode:: yaml

   apiVersion: cluster.cpc.platform.confluent.io/v1beta1
   kind: ZookeeperCluster
   metadata:
     name: my-quickstart-zk
   spec:
     blueprintRef:
       name: quickstart-zookeeper
     k8sClusterRef:
       name: myQuickstartCluster
   ---
   apiVersion: cpc.platform.confluent.io/v1beta1
   kind: KafkaCluster
   metadata:
     name: my-quickstart-kafka
   spec:
     blueprintRef:
       name: quickstart-kafka
     k8sClusterRef:
       name: myQuickstartCluster
     dependencies:
       zookeeperCluster:
         name: my-quickstart-zk
       schemaRegistryCluster:
         name: my-quickstart-schemaregistry
   ---
   apiVersion: cluster.cpc.platform.confluent.io/v1beta1
   kind: SchemaRegistryCluster
   metadata:
     name: my-quickstart-schemaregistry
   spec:
     blueprintRef:
       name: quickstart-schemaregistry
     k8sClusterRef:
       name: myQuickstartCluster
     dependencies:
       kafkaCluster:
         name: my-quickstart-kafka

#. Deploy the Confluent clusters:

   .. sourcecode:: bash 
   
      kubectl apply -f <Confluent-component-cluster-CRs> \
        --context <control-plane-context> \
        --namespace <Confluent-CR-namespace>
      
Monitor Deployments
===================

As a platform admin, you can see which deployment provisioning is in progress
and can track the state of the deployments from your Control Plane.

For example:

.. sourcecode:: bash 

   kubectl get cpc --namespace <Confluent-CR-namespace> --context <control-plane-context>
   
   kubectl get kafkaclusters -namespace <Confluent-CR-namespace> --context <control-plane-context>

Delete Confluent Deployment
===========================

From your Control Plane, delete the Confluent CR to uninstall a Confluent
component from the Data Plane:

.. sourcecode:: bash

   kubectl delete -f <Confluent-component-cluster-CR> \
     --context <control-plane-context> \
     --namespace <Confluent-CR-namespace>
